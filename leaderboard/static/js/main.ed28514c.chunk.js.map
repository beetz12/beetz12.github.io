{"version":3,"sources":["logo.svg","LeaderBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LeaderBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","donations","_this2","console","log","axios","get","then","res","data","setState","loading","error","catch","err","Top10","LpTeams","forEach","transaction","LP","source","metadata","contribution","amount","find","lp","name","push","sort","a","b","slice","mockData","react_default","createElement","className","id","map","team","index","key","toLocaleString","style","currency","Component","App","LeaderBoard_LeaderBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"m8SAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uMCMnBC,qBAElB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,IAHKR,mFAOA,IAAAS,EAAAN,KAClBO,QAAQC,IAAI,qBAEZC,IAAMC,IAAN,yDACGC,KAAK,SAAAC,GACJL,QAAQC,IAAI,SAAUI,GAEtB,IAAMP,EAAYO,EAAIC,KAItBP,EAAKQ,SAAS,CACZT,YACAU,SAAS,EACTC,MAAO,SAGVC,MAAM,SAAAC,GAELZ,EAAKQ,SAAS,CACZC,SAAS,EACTC,MAAOE,uCAOb,IAGIC,EAHEC,EAAU,GACTf,EAAaL,KAAKI,MAAlBC,UAuBL,OAtBFE,QAAQC,IAAKR,KAAKI,OAEfC,GAAaA,EAAUQ,OACxBR,EAAUQ,KAAKQ,QAAQ,SAAAC,GACvB,IAAIC,EAAKD,EAAYE,OAAOC,SAASF,GACjCG,EAAeJ,EAAYK,QAC/BP,EAAQQ,KAAK,SAAAC,GAAE,OAAIA,EAAGC,OAASP,IAG3BH,EAAQQ,KAAK,SAAAC,GAAE,OAAIA,EAAGC,OAASP,KACtBH,EAAQQ,KAAK,SAAAC,GAAE,OAAIA,EAAGC,OAASP,IACrCG,cAAgBA,EAGrBN,EAAQW,KAAK,CAACD,KAAMP,EAAIG,mBAG5BN,EAAQY,KAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEP,aAAeQ,EAAER,aAAgB,EAAMQ,EAAER,aAAeO,EAAEP,cAAiB,EAAI,IACzGP,EAAQC,EAAQe,MAAM,EAAG,GACzB5B,QAAQC,IAAI4B,EAASvB,KAAMO,IAGlBiB,EAAAJ,EAAAK,cAAA,OAAKC,UAAU,SACdF,EAAAJ,EAAAK,cAAA,QAAME,GAAG,SAAT,6BACAH,EAAAJ,EAAAK,cAAA,OAAKC,UAAU,SACdpB,GAASA,EAAMsB,IAAI,SAACC,EAAMC,GAAP,OAClBN,EAAAJ,EAAAK,cAAA,MAAIM,IAAKF,EAAKZ,KAAMS,UAAW,SAAWI,EAAQ,IAAM,EAAI,OAAS,QACrEN,EAAAJ,EAAAK,cAAA,OAAKC,UAAU,QAAf,MAA0BG,EAAKZ,KAA/B,KACAO,EAAAJ,EAAAK,cAAA,OAAKC,UAAU,iBAAiBG,EAAKhB,aAAa,KAAKmB,eAAe,QAAS,CAACC,MAAM,WAAYC,SAAS,qBAnElFC,cCU1BC,gMATX,OACEZ,EAAAJ,EAAAK,cAAA,OAAKC,UAAU,OAEbF,EAAAJ,EAAAK,cAACY,EAAD,cALUF,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAJ,EAAAK,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.ed28514c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport {default as mockData} from './data/sample_payments';\nimport './LeaderBoard.css';\n\nexport default class LeaderBoard extends Component {\n\n   constructor(props) {\n    super(props);\n    this.state = {\n      donations: []\n    }\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount');\n    // Remove the 'www.' to cause a CORS error (and see the error state)\n    axios.get(`https://mysterious-caverns-61498.herokuapp.com/charge`)\n      .then(res => {\n        console.log('res = ', res);\n        // Transform the raw data by extracting the nested posts\n        const donations = res.data;\n\n        // Update state to trigger a re-render.\n        // Clear any errors, and turn off the loading indiciator.\n        this.setState({\n          donations,\n          loading: false,\n          error: null\n        });\n      })\n      .catch(err => {\n        // Something went wrong. Save the error in state and re-render.\n        this.setState({\n          loading: false,\n          error: err\n        });\n      });\n  }\n\n  render() {\n    \n    const LpTeams = [];\n    const {donations} = this.state;\n    console.log( this.state);\n    let Top10;\n    if(donations && donations.data){\n      donations.data.forEach(transaction => {\n      let LP = transaction.source.metadata.LP;\n      let contribution = transaction.amount;\n      LpTeams.find(lp => lp.name === LP);\n\n\n      if (LpTeams.find(lp => lp.name === LP)) {\n        let team = LpTeams.find(lp => lp.name === LP);\n        team.contribution += contribution;\n      }\n      else {\n        LpTeams.push({name: LP, contribution});\n      }\n    });\n    LpTeams.sort((a, b) => (a.contribution < b.contribution) ? 1 : ((b.contribution < a.contribution) ? -1 : 0))\n    Top10 = LpTeams.slice(0, 9);\n    console.log(mockData.data, LpTeams);\n    }\n    \n      return <div className=\"board\">\n              <span id=\"title\">Game of Torch Leaderboard</span>\n              <div className=\"teams\">\n              {Top10 && Top10.map((team, index) =>\n                <li key={team.name} className={\"team \" + (index % 2 === 0 ? \"even\" : \"odd\")}>\n                <div className=\"name\">LP {team.name} </div>\n                <div className=\"contribution\">{(team.contribution/100).toLocaleString(\"en-US\", {style:\"currency\", currency:\"USD\"})}</div>\n                </li>)}\n              </div>\n            </div>\n  }\n}\n","import React, { Component } from 'react';\nimport LeaderBoard from './LeaderBoard';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <LeaderBoard/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}